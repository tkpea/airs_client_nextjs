import type { NextPage } from 'next'
import Head from 'next/head'
import {FormEvent, useEffect, useState} from "react";
import axios from 'axios'
import {Air, AirsOption} from './api/airs'
import {LineChart, Line, XAxis, CartesianGrid, YAxis, ResponsiveContainer, Tooltip, Label} from "recharts";
import {Button, Container, TextField} from '@material-ui/core'
import day from "../plugins/day";

const fetchAir = (params?:AirsOption):Promise<Air[]> => {
    return new Promise((resolve, reject) => {
        axios
            .get("/api/airs/",{params})
            .then((res) => {
                resolve(res.data)
            })
            .catch((error) => {
                reject(error)
            })
    })
}
const useFetchAir = () => {
    const [data, setData] = useState<Air[]>([]);
    const [current, setCurrent] = useState<Air>({
        time: undefined,
        co2: undefined,
        temperature: undefined,
        humidity: undefined
    });
    const [isFetching, setIsFetching] = useState(true);

    useEffect(() => {
        fetch()
    }, []);

    const fetch = (prams?:AirsOption) => {
        setIsFetching(true);
        fetchAir(prams).then((res) => {
            const response = res.map(v => {
                v.time = day(v.time).format("HH:mm")
                return v
            })
            setCurrent(response[response.length - 1])
            response.pop()
            setData(response);
        }).catch(error => {
            console.error(error)
        })
        .finally(() => {
            setIsFetching(false);
        })
    }

    return {
        airs: data,
        currentAir: current,
        isFetching,
        fetch
    };
}

const Airs: NextPage = () => {
    const { airs, currentAir, isFetching, fetch } = useFetchAir();
    const [ params, setParams] = useState<AirsOption>({
        start: "-1d",
        stop:"now()",
        every:"5m",
        fn: "mean",
    });
    const handleChange = (event: FormEvent<HTMLInputElement | HTMLTextAreaElement>) => {
        const target = event.target as HTMLInputElement
        switch (target.name) {
            case 'start':
                setParams({...params, start: target.value})
                break;
            case 'stop':
                setParams({...params, stop: target.value})
                break;
            case 'every':
                setParams({...params, every: target.value})
                break;
            case 'fn':
                setParams({...params, fn: target.value as "mean" | "avg" | "max" | "min"})
                break;
            default:
                console.warn('key not found');
        }
    };

    const handleSubmit = (event: FormEvent<HTMLFormElement>) => {
        fetch(params)
        event.preventDefault();

    }
    return (
        <div>
            <Head>
                <title>Create Next App</title>
                <meta name="description" content="Generated by create next app" />
                {/*<link rel="icon" href="/favicon.ico" />*/}
            </Head>


            <Container style={{width: '100%'}}>
                {!isFetching &&
                <ResponsiveContainer width="100%" height={400}>

                    <LineChart height={300} data={airs} margin={{ top: 5, right: 20, bottom: 5, left: 0 }}>

                        <XAxis dataKey={"time"} fontSize={10}/>
                        <YAxis width={80} yAxisId="left" tick={{ fontSize: 10 }} >
                            <Label
                                value="温度（℃）"
                                angle={-90}
                                position='outside'
                                fill='#D94A4A'
                                fontSize={14}

                            />
                        </YAxis>
                        <YAxis width={80} yAxisId="right"  orientation="right" tick={{ fontSize: 10 }} >
                            <Label
                                value="湿度（％）"
                                angle={-90}
                                position='outside'
                                fill='#038C8C'
                                fontSize={14}
                            />
                        </YAxis>

                        <Tooltip />
                        <Line type="monotone" dataKey={"temperature"} stroke="#D94A4A"  strokeWidth={2} unit="℃"　yAxisId="left" dot={<span/>}/>
                        <Line type="monotone" dataKey={"humidity"} stroke="#038C8C" strokeWidth={2} unit="%" yAxisId="right" dot={<span/>}/>
                        <CartesianGrid stroke="#ccc" strokeDasharray="1 1" />
                    </LineChart>
                </ResponsiveContainer>
                }
                <form onSubmit={(event) => handleSubmit(event)}>
                    <TextField id="standard-basic" label="start" name="start" value={params.start} onChange={(event) => handleChange(event)}/>
                    <TextField id="standard-basic"  label="end" name="stop" value={params.stop}  onChange={(event) => handleChange(event)}/>
                    <TextField id="standard-basic" label="start" name="every" value={params.every} onChange={(event) => handleChange(event)}/>
                    <TextField id="standard-basic"  label="end" name="fn" value={params.fn}  onChange={(event) => handleChange(event)}/>

                    <Button variant="contained" color="primary" type={"submit"}>
                        Primary
                    </Button>
                </form>
                <div>{currentAir.time}</div>
            </Container>
        </div>
    )
}

export default Airs
