import type { NextPage } from 'next'
import Head from 'next/head'
import {FormEvent, useEffect, useState} from "react";
import http from "../plugins/http";
import {Air, AirsOption} from './api/airs'
import {LineChart, Line, XAxis, CartesianGrid, YAxis, ResponsiveContainer, Tooltip, Label} from "recharts";
import { Button, Container, TextField} from '@material-ui/core'
import day from "../plugins/day";

const useFetchAir = () => {
    const [data, setData] = useState<Air[]>([]);
    const [isFetching, setIsFetching] = useState(true);

    useEffect(() => {
        fetch()
    }, []);

    const fetch = (params?:AirsOption) => {
        setIsFetching(true);
        http
            .get("/api/airs/",{params})
            .then((res) => {

                setData(res.data);
            })
            .catch((error) => {
                console.error(error)
            })
            .finally(() => {
                setIsFetching(false);
            })
    }

    return {
        data,
        isFetching,
        fetch
    };
}

const Airs: NextPage = () => {
    const { data, isFetching, fetch } = useFetchAir();
    const [airs, setAirs] = useState<Air[]>()
    const [currentAir, setCurrentAir] = useState<Air>()

    useEffect(() => {
        const res = data.map(v => {
            v.time = day(v.time).format("M/D HH:mm")
            return v
        })
        setCurrentAir(res[res.length - 1])
        res.pop()
        setAirs(res)
    },[data])
    const [ params, setParams] = useState<AirsOption>({
        start: "-1d",
        stop:"now()",
        every:"5m",
        fn: "mean",
    });
    const handleChange = (event: FormEvent<HTMLInputElement | HTMLTextAreaElement>) => {
        const target = event.target as HTMLInputElement
        switch (target.name) {
            case 'start':
                setParams({...params, start: target.value})
                break;
            case 'stop':
                setParams({...params, stop: target.value})
                break;
            case 'every':
                setParams({...params, every: target.value})
                break;
            case 'fn':
                setParams({...params, fn: target.value as "mean" | "avg" | "max" | "min"})
                break;
            default:
                console.warn('key not found');
        }
    };

    const handleSubmit = (event: FormEvent<HTMLFormElement>) => {
        fetch(params)
        event.preventDefault();

    }
    return (
        <div>
            <Head>
                <title>Create Next App</title>
                <meta name="description" content="Generated by create next app" />
                {/*<link rel="icon" href="/favicon.ico" />*/}
            </Head>


            <Container style={{width: '100%'}}>

                <form onSubmit={(event) => handleSubmit(event)}>
                    <div className={"flex justify-evenly p-5"}>
                        <TextField id="standard-basic" label="start" name="start" value={params.start} onChange={(event) => handleChange(event)}/>
                        <TextField id="standard-basic"  label="end" name="stop" value={params.stop}  onChange={(event) => handleChange(event)}/>
                        <TextField id="standard-basic" label="every" name="every" value={params.every} onChange={(event) => handleChange(event)}/>
                        <TextField id="standard-basic"  label="fn" name="fn" value={params.fn}  onChange={(event) => handleChange(event)}/>
                        <Button variant="contained" color="primary" type={"submit"}>
                            Primary
                        </Button>
                    </div>


                </form>
                {currentAir &&
                <div className={"flex justify-center"}>
                    <dl className={"p-4"}>
                        <dt>co2</dt>
                        <dd>{currentAir.co2}</dd>
                    </dl>
                    <dl className={"p-4"}>
                        <dt>温度</dt>
                        <dd>{currentAir.temperature}</dd>
                    </dl>
                    <dl className={"p-4"}>
                        <dt>湿度</dt>
                        <dd>{currentAir.humidity}</dd>
                    </dl>
                </div>
                }
                {!isFetching &&

                    <div>
                        <ResponsiveContainer width="100%" height={400}>
                            <LineChart height={300} data={airs} margin={{ top: 5, right: 20, bottom: 5, left: 0 }}>

                                <XAxis dataKey={"time"} fontSize={10}/>
                                <YAxis width={80} yAxisId="left" tick={{ fontSize: 10 }} >
                                    <Label
                                        value="温度（℃）"
                                        angle={-90}
                                        position='outside'
                                        fill='#D94A4A'
                                        fontSize={14}
                                    />
                                </YAxis>
                                <YAxis width={80} yAxisId="right"  orientation="right" tick={{ fontSize: 10 }} >
                                    <Label
                                        value="湿度（％）"
                                        angle={-90}
                                        position='outside'
                                        fill='#038C8C'
                                        fontSize={14}
                                    />
                                </YAxis>

                                <Tooltip />
                                <Line type="monotone" dataKey={"temperature"} stroke="#D94A4A"  strokeWidth={2} unit="℃"　yAxisId="left" dot={<span/>}/>
                                <Line type="monotone" dataKey={"humidity"} stroke="#038C8C" strokeWidth={2} unit="%" yAxisId="right" dot={<span/>}/>
                                <CartesianGrid stroke="#ccc" strokeDasharray="1 1" />
                            </LineChart>
                        </ResponsiveContainer>
                        <ResponsiveContainer width="100%" height={400}>

                            <LineChart height={300} data={airs} margin={{ top: 5, right: 20, bottom: 5, left: 0 }}>

                                <XAxis dataKey={"time"} fontSize={10}/>
                                <YAxis width={80} yAxisId="left" tick={{ fontSize: 10 }} >
                                    <Label
                                        value="CO2（ppm）"
                                        angle={-90}
                                        position='outside'
                                        fill='#D94A4A'
                                        fontSize={14}

                                    />
                                </YAxis>
                                <YAxis width={80} yAxisId="right"  orientation="right" tick={{ fontSize: 10 }} >

                                </YAxis>

                                <Tooltip />
                                <Line type="monotone" dataKey={"co2"} stroke="#D94A4A"  strokeWidth={2} unit="℃"　yAxisId="left" dot={<span/>}/>
                                <CartesianGrid stroke="#ccc" strokeDasharray="1 1" />
                            </LineChart>
                        </ResponsiveContainer>
                    </div>
                }

            </Container>
        </div>
    )
}
// @ts-ignore
export default Airs
